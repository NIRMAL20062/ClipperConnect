// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that recommends optimal time slots for barbershop bookings.
 *
 * - optimizeBarbershopEfficiency - A function that handles the time slot optimization process.
 * - OptimizeBarbershopEfficiencyInput - The input type for the optimizeBarbershopEfficiency function.
 * - OptimizeBarbershopEfficiencyOutput - The return type for the optimizeBarbershopEfficiency function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizeBarbershopEfficiencyInputSchema = z.object({
  historicalBookingData: z
    .string()
    .describe(
      'Historical booking data for the barbershop, including date, time, service, and barber.'
    ),
  availableTimeSlots: z
    .string()
    .describe(
      'A list of available time slots for the barbershop, including date, start time, and end time.'
    ),
  currentBookings: z
    .string()
    .describe(
      'A list of current bookings for the barbershop, including date, time, service, and barber.'
    ),
});
export type OptimizeBarbershopEfficiencyInput = z.infer<
  typeof OptimizeBarbershopEfficiencyInputSchema
>;

const OptimizeBarbershopEfficiencyOutputSchema = z.object({
  recommendedTimeSlots: z
    .string()
    .describe(
      'A list of recommended time slots for the barbershop, including date, start time, end time and barber, optimized for efficiency and conflict avoidance.'
    ),
  reasoning: z
    .string()
    .describe(
      'Explanation of why the time slots were recommended, including consideration of historical booking patterns and current bookings.'
    ),
});
export type OptimizeBarbershopEfficiencyOutput = z.infer<
  typeof OptimizeBarbershopEfficiencyOutputSchema
>;

export async function optimizeBarbershopEfficiency(
  input: OptimizeBarbershopEfficiencyInput
): Promise<OptimizeBarbershopEfficiencyOutput> {
  return optimizeBarbershopEfficiencyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'optimizeBarbershopEfficiencyPrompt',
  input: {schema: OptimizeBarbershopEfficiencyInputSchema},
  output: {schema: OptimizeBarbershopEfficiencyOutputSchema},
  prompt: `You are an AI-powered scheduling assistant for a barbershop.

  Your goal is to recommend optimal time slots for bookings, minimizing conflicts and maximizing efficiency.
  Consider historical booking patterns and current bookings to make your recommendations. Provide a detailed
  explanation of your reasoning.

  Historical Booking Data: {{{historicalBookingData}}}
  Available Time Slots: {{{availableTimeSlots}}}
  Current Bookings: {{{currentBookings}}}

  Based on this information, provide a list of recommended time slots and explain your reasoning.
  The recommendation should be provided as a string.
  The reasoning should be provided as a string.
  `,
});

const optimizeBarbershopEfficiencyFlow = ai.defineFlow(
  {
    name: 'optimizeBarbershopEfficiencyFlow',
    inputSchema: OptimizeBarbershopEfficiencyInputSchema,
    outputSchema: OptimizeBarbershopEfficiencyOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
