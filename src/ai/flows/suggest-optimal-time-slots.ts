
// This file is generated by Gemini.
'use server';
/**
 * @fileOverview An AI agent that suggests optimal time slots for barber appointments based on historical booking patterns.
 *
 * - suggestOptimalTimeSlots - A function that suggests optimal time slots.
 * - SuggestOptimalTimeSlotsInput - The input type for the suggestOptimalTimeSlots function.
 * - SuggestOptimalTimeSlotsOutput - The return type for the suggestOptimalTimeSlots function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestOptimalTimeSlotsInputSchema = z.object({
  barbershopId: z.string().describe('The ID of the barbershop.'),
  serviceType: z.string().describe('The type of service requested (e.g., haircut, beard trim).'),
  date: z.string().describe('The date for which to suggest time slots (YYYY-MM-DD).'),
  preferredTime: z.string().optional().describe("The preferred specific time for the appointment (e.g., HH:mm format like '14:30'), if any."),
});
export type SuggestOptimalTimeSlotsInput = z.infer<typeof SuggestOptimalTimeSlotsInputSchema>;

const SuggestOptimalTimeSlotsOutputSchema = z.object({
  optimalTimeSlots: z.array(z.string()).describe('An array of suggested optimal time slots in HH:mm format.'),
  reasoning: z.string().describe('The reasoning behind the suggested time slots, based on historical booking patterns.'),
});
export type SuggestOptimalTimeSlotsOutput = z.infer<typeof SuggestOptimalTimeSlotsOutputSchema>;

export async function suggestOptimalTimeSlots(input: SuggestOptimalTimeSlotsInput): Promise<SuggestOptimalTimeSlotsOutput> {
  return suggestOptimalTimeSlotsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestOptimalTimeSlotsPrompt',
  input: {schema: SuggestOptimalTimeSlotsInputSchema},
  output: {schema: SuggestOptimalTimeSlotsOutputSchema},
  prompt: `You are an AI assistant that suggests optimal time slots for barber appointments.

  Based on historical booking patterns for barbershop ID {{{barbershopId}}} on {{{date}}}, and the service type {{{serviceType}}}, suggest the best time slots for a new appointment.

  Take into account any preferred specific time specified by the user: {{{preferredTime}}}. If a specific time like "14:30" is provided, try to suggest slots around that time if possible, otherwise suggest other optimal slots.

  Output the time slots in HH:mm format. Provide a brief explanation of your reasoning.

  Ensure that all returned time slots are on the date: {{{date}}}.

  Example:
  {
    "optimalTimeSlots": ["10:00", "11:30", "14:00"],
    "reasoning": "Based on historical data, these time slots are typically less busy for haircuts on Wednesdays."
  }
  
  If preferredTime is "14:30", a possible output might be:
  {
    "optimalTimeSlots": ["14:00", "14:30", "15:00"],
    "reasoning": "These slots are available around your preferred time of 14:30 and are generally good times for this service."
  }

  Here's the information to use:
  Barbershop ID: {{{barbershopId}}}
  Service Type: {{{serviceType}}}
  Date: {{{date}}}
  Preferred Time: {{{preferredTime}}}
  Remember that today's date is: {{{date}}}`,
});

const suggestOptimalTimeSlotsFlow = ai.defineFlow(
  {
    name: 'suggestOptimalTimeSlotsFlow',
    inputSchema: SuggestOptimalTimeSlotsInputSchema,
    outputSchema: SuggestOptimalTimeSlotsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
